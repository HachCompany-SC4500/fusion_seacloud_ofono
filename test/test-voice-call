#!/usr/bin/env python3

from gi.repository import GLib
import sys
import dbus
import dbus.mainloop.glib
from time import sleep

def watch_call(path, voicecall):

	if path not in watched_calls:
		voicecall.connect_to_signal("DisconnectReason",
				voicecall_disconnect_reason)

		voicecall.connect_to_signal("PropertyChanged",
				voicecall_property_changed)

		watched_calls.append(path)


def get_call(path):
	voicecall = dbus.Interface(get_object(bus, path),
			'org.ofono.VoiceCall')

	watch_call(path, voicecall)

	current_properties = voicecall.GetProperties()

	expected = ['LineIdentification', 'Name', 'Multiparty', 'State']
	optional = ['IncomingLine', 'StartTime','Information', 'Icon',\
			'RemoteHeld', 'RemoteMultiparty']

	all_properties = expected
	all_properties.extend(optional)

	print('\nVoiceCall "%s" properties:' % path)
	for property in all_properties:
		if property not in current_properties:
			if property in optional:
				print('\t%s: not received (optional)' %\
						(property))
			else:
				print('\t%s not received (err)' %\
						(property))
		else:
			print('\t%s: "%s"' % (property, current_properties[property]))


# org.ofono.VoiceCall signals
def voicecall_property_changed(name, value):
	if type(value) is dbus.Byte:
		print('- Property changed: "%s" changed to %d' % (name, value))
	else:
		print('- Property changed: "%s" changed to %s' % (name, value))

def voicecall_disconnect_reason(reason):
	print('# Disconnection: reason "%s"' % (reason))
# end org.ofono.VoiceCall signals


# org.ofono.VoiceCallManager signals
def voicecall_mgr_call_added(path, properties):
	get_call(path)
# end org.ofono.VoiceCallManager signals


def get_object(bus, object_path):
	return bus.get_object('org.ofono', object_path)


if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()

	if len(sys.argv) == 2:
		modem = sys.argv[1]
	else:
		manager = dbus.Interface(get_object(bus, '/'),
				'org.ofono.Manager')

		modems = manager.GetModems()

		modem = modems[0][0]


	for path, properties in modems:

		if not modem == path:
			continue

		if 'org.ofono.VoiceCallManager' not in properties['Interfaces']:
			print("Modem %s does not have VoiceCallManager interface" %\
					(path))
			sys.exit(1)

		mgr = dbus.Interface(get_object(bus, modem),
				'org.ofono.VoiceCallManager')

		mgr.connect_to_signal("CallAdded", voicecall_mgr_call_added)

		calls = mgr.GetCalls()

		watched_calls = []	# list of watched path calls
		for path, properties in calls:
			get_call(path)

		mainloop = GLib.MainLoop()
		mainloop.run()








